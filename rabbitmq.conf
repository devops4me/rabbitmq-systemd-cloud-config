
#### @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ####
#### ################################################## ####
#### RabbitMQ 3.7 / ETCD 3.3 Cluster Configuration File ####
#### ################################################## ####

# -- We have opted to use the CoreOS etcd key-value store as the
# -- discovery engine that allows flexible clustering with no
# -- race conditions. Other options are DNS, EC2 tags, Consul,
# -- AWS Auto Scaling Groups and manually on the command line.

cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd


# -- The single most powerful statement in the configuration states that
# -- localhost is the ETCD_HOST. It draws its power from genericity in that
# -- no fancy dns discovery nor integer indices and the like are required.
# -- Every node that joins (whenever) simply uses the ETCD onlocalhost to
# -- join or leave the cluster.

cluster_formation.etcd.host = localhost


# -- Only use the plaintext scheme for development and testing.
# -- Production clusters must employ transport layer security.

cluster_formation.etcd.scheme = http


# -- This setting will alter urls used in communicating with etcd
# -- to prefix keys with rmq (the default is rabbitmq).

cluster_formation.etcd.key_prefix = rmq


# -- Send all logs to standard out at the info level and also switch
# -- off all logging to files. Other agents running alongside or even
# -- inside (the RabbitMQ container) can pick logs up from there.

log.console = true
log.console.level = info
log.file = false


### @@@@@@@@@@@@@@ TOdo TOdo TOdo TOdo TOdo
### @@@@@@@@@@@@@@ TOdo TOdo TOdo TOdo TOdo
### @@@@@@@@@@@@@@ TOdo TOdo TOdo TOdo TOdo

### move cluster name to cloud-init file that is a template so terraform puts in the ECO-system ID + milliseconds

### do docker run command in systemd config type in cloud-init

### let us hope that ignition is done first - if not find a way to reverse the service units with CT and add to present ignition

cluster_formation.etcd.cluster_name = cluster_name_1


# -- Node removal is a dicey subject in RabbitMQ clustering
# -- circles. You need to consider HA policies otherwise data
# -- and queues could be lost. This setting tells RabbitMQ to
# -- only log warnings and leave node removal to us humans.

cluster_formation.node_cleanup.only_log_warning = true
